<%  
	if (property.type == Boolean.class || property.type == boolean.class)
        out << renderBooleanEditor(domainClass, property)		
	else if (Number.class.isAssignableFrom(property.type) || (property.type.isPrimitive() && property.type != boolean.class))			
        out << renderNumberEditor(domainClass, property, false)		
	else if (Currency.class.isAssignableFrom(property.type))
		out << renderNumberEditor(domainClass, property, true)
	else if (property.type == String || property.type == URL.class)
    	out << renderStringEditor(domainClass, property)
	else if (property.type == Date.class || property.type == java.sql.Date.class || property.type == java.sql.Time.class || property.type == Calendar.class)
        out << renderDateEditor(domainClass, property)
	else if (property.manyToOne || property.oneToOne)
        out << renderManyToOne(domainClass, property)
	else if (property.type == TimeZone.class)
        out << renderSelectTypeEditor("timeZone", domainClass, property)
    else if (property.type == Locale.class)
        out << renderSelectTypeEditor("locale", domainClass, property)
    else if (property.type == Currency.class)
        out << renderSelectTypeEditor("currency", domainClass, property)
    else if (property.type==([] as Byte[]).class) //TODO: Bug in groovy means i have to do this :(
        out << renderByteArrayEditor(domainClass, property)
    else if (property.type==([] as byte[]).class) //TODO: Bug in groovy means i have to do this :(
        out << renderByteArrayEditor(domainClass, property)
        
	private renderBooleanEditor(domainClass, property) {
		def sb = new StringBuilder("")        
		sb << "<e:combobox name=\"${property.name}\" panelHeight=\"auto\" width=\"60px\">\n\t\t\t\t"
		sb << "<option value=\"true\"><g:message code=\"default.boolean.true\"/></option>\n\t\t\t\t"  
		sb << "<option value=\"false\"><g:message code=\"default.boolean.false\"/></option>\n\t\t\t"  
		sb << "</e:combobox>"    
        return sb.toString()
    }
	
	private renderNumberEditor(domainClass, property, currency) {
		def precicion = (currency || property.type == Float.class) ?  'precision="2"' : ""
		def props = "width=\"100px\" maxlenght=\"8\""
			
        if (!cp) {
            if (property.type == Byte.class)
                return "<e:numberbox name=\"${property.name}\" mim=\"-128\" max=\"127\" $props/>"                        
        }
        else {
            if (cp.range) {
				return "<e:numberbox name=\"${property.name}\" mim=\"\${${cp.range.from}}\" max=\"\${${cp.range.to}}\" ${precicion} $props/>"                
            }
            else if (cp.inList) {
				//todo
            }                       
        }		
		return "<e:numberbox name=\"${property.name}\" ${precicion} $props/>"
    }
	
    private renderStringEditor(domainClass, property) {
    	if (!cp) {    	
            return "<e:validatebox name=\"${property.name}\"/>"            
        } else {
        	def sb = new StringBuilder("")
            if ("textarea" == cp.widget || (cp.maxSize > 250 && !cp.password && !cp.inList)) {
                sb << "<e:textarea name=\"${property.name}\" style=\"height:60px;\"" 				
				if (cp.maxSize) sb << " maxlength=\"${cp.maxSize}\" "
				if (isRequired()) sb << " required=\"true\" "
 				sb << "></e:textarea>"
				
            } else if (cp.inList) {
				// todo	
			} else {
				def type				
				if (cp.password) {
					type="password"
				} else if (cp.url) {
					type="url"
				} else if (cp.email) {
					type="email"
				} 
				
				type = (type) ? "validType=\"$type\"" : "" 
							
				sb << "<e:validatebox name=\"${property.name}\" $type"							
				if (cp.maxSize) sb << " maxlength=\"${cp.maxSize}\""
				if (!cp.editable) sb << " readonly=\"readonly\""				
				if (isRequired()) sb << " required=\"true\""				
				sb << "/>"
			}
			sb as String
		}
	}
	
	 private renderDateEditor(domainClass, property) {
        def precision = (property.type == Date.class || property.type == java.sql.Date.class || property.type == Calendar.class) ? "day" : "minute";
		
		if (cp  &&!cp.editable) {
			return "\${${domainInstance}?.${property.name}?.toString()}"
        }
				        
        return precision == 'day' ? "<e:datebox name=\"${property.name}\" width=\"100px\"/>" : "<e:timespinner name=\"${property.name}\" showSeconds=\"true\" width=\"100px\"/>"        
    }
	
	private renderManyToOne(domainClass,property) {
        if (property.association) {
			def br = "\n\t\t\t\t"
			def sb = new StringBuilder("")
			sb << "<e:combogrid${br}"			
			sb << "name=\"${property.name}\"${br}"
			sb << "width=\"150px\"${br}"
			sb << "url=\"\${createLink(controller: '${property.name}', action:'list.json')}\"${br}"
			sb << "idField=\"id\"${br}"
			sb << "textField=\"id\"${br}"
			sb << "fitColumns=\"true\"${br}"
			sb << "remote=\"true\"${br}"			
			if (isRequired())  sb << "required=\"true\"${br}"				
			sb << "columns=\"js:[[${br}\t"
			sb << "{field:'id', title:'\${g.message(code: '${domainClass.propertyName}.${property.name}.id')}', width:100}${br}"
			sb << "]]\"/>"
            return sb.toString()
        }
    }
	
	private renderSelectTypeEditor(type, domainClass,property) {
        if (!cp) {
            return "<g:${type}Select name=\"${property.name}\" value=\"\${${domainInstance}?.${property.name}}\" />"
        }
        else {
            def sb = new StringBuffer("<g:${type}Select name=\"${property.name}\" ")
            if (cp.widget) sb << "widget=\"${cp.widget}\" ";
            cp.attributes.each { k, v ->
                sb << "${k}=\"${v}\" "
            }
            sb << "value=\"\${${domainInstance}?.${property.name}}\" ${renderNoSelection(property)} />"
            return sb.toString()
        }
    }
			
	private boolean isRequired() {
		!isOptional()
	}

	private boolean isOptional() {
	    if (!cp) {
	        return false
	    }
	    else {
	        cp.nullable || (cp.propertyType == String && cp.blank) || cp.propertyType in [boolean, Boolean]
	    }
	}        
%>